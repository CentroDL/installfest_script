#!/usr/bin/env bash

COMPILED_AT='Thu Apr 14 14:27:35 EDT 2016'
#
#  _           _        _ _  __           _
# (_)_ __  ___| |_ __ _| | |/ _| ___  ___| |_
# | | '_ \/ __| __/ _` | | | |_ / _ \/ __| __|
# | | | | \__ \ || (_| | | |  _|  __/\__ \ |_
# |_|_| |_|___/\__\__,_|_|_|_|  \___||___/\__|
#
# Installation, Setup and Dotfile Creation Script
# for Students of General Assemb.ly's WDI Program

# Authors: Phillip Lamplugh, GA Instructor (2014),
#          PJ Hughes, GA Instructor (2014 & 2015)

# Resources:
#
# https://github.com/thoughtbot/laptop
# https://github.com/toranb/ubuntu-development-machine
# https://github.com/divio/osx-bootstrap
# https://github.com/paulirish/dotfiles
# https://github.com/mathiasbynens/dotfiles/
# https://github.com/ndbroadbent/dotfiles

# References:
#
# http://www.sudo.ws/
# http://www.gnu.org/software/bash/manual/bashref.html
# http://www.shellcheck.net
# http://explainshell.com/

#-------------------------------------------------------------------------------
# Set up basic env vars (utils/script_env_vars.sh)
#-------------------------------------------------------------------------------

# Standard Bash Variables
# `OSTYPE` A string describing the operating system Bash is running on.
# `MACHTYPE` system type in cpu-company-system
# `SECONDS` number of seconds since the shell was started.

# FIXME (PJ) should have a better place to decide these versions:
#   Ruby (rbenv), Python (pyenv), Node (nvm)
BELOVED_RUBY_VERSION="2.2.3"
CURRENT_STABLE_RUBY_VERSION="2.2.3"

# TODO (pj) decide what the python versions should really be...
#   and maybe come up with a bigger, better place to hang this info
BELOVED_PYTHON_VERSION="anaconda-2.0.1"
CURRENT_STABLE_PYTHON_VERSION="3.4.1"

# NOT BEING USED YET, BUT SHOULD!
NODE_VERSION="stable" # using nvm's language...

if [[ "$OSTYPE" == "darwin"* ]]; then
  SYSTEM="mac"
  BASH_FILE=".bash_profile"
  MINIMUM_MAC_OS="10.7.0"
else
  SYSTEM="ubuntu"
  BASH_FILE=".bashrc"
fi

SCRIPT_ROOT="$HOME/.wdi"

# TODO (PJ) this needs to be more robust, BY FAR!
SCRIPT_REPO="https://github.com/GA-WDI/installfest_script.git"
SCRIPT_REPO_BRANCH="master"

# the downloaded repo
SCRIPT_DIR="$SCRIPT_ROOT/installfest"
SCRIPT_SETTINGS="$SCRIPT_DIR/settings"

SCRIPT_DOTFILES=$SCRIPT_SETTINGS/dotfiles/*
SCRIPT_FONTS=$SCRIPT_SETTINGS/fonts/*
SCRIPT_SUBL_SETTINGS=$SCRIPT_SETTINGS/sublime_settings/*
SCRIPT_SUBL_PACKAGES=$SCRIPT_SETTINGS/sublime_packages/*
SCRIPT_THEMES=$SCRIPT_SETTINGS/terminal/*

# the working folder
STUDENT_FOLDER="$HOME/code/wdi"

# Deprecated as part of the utils/report_log.sh system...
# TODO (PJ) update how reporting is done?
# OWNER="ga-students"
# REPO="wdi_melville_instructors"

mkdir -p "$SCRIPT_ROOT"

#-------------------------------------------------------------------------------
# Set text formatting (utils/define_terminal_colors.sh)
#-------------------------------------------------------------------------------

# set 256 color profile where possible
if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

# Reset formatting
RESET=$(      tput sgr0)

# Foreground color
BLACK=$(      tput setaf 0)
RED=$(        tput setaf 1)
GREEN=$(      tput setaf 2)
YELLOW=$(     tput setaf 3)
BLUE=$(       tput setaf 4)
MAGENTA=$(    tput setaf 5)
CYAN=$(       tput setaf 6)
WHITE=$(      tput setaf 7)

# Background color
BG_BLACK=$(   tput setab 0)
BG_RED=$(     tput setab 1)
BG_GREEN=$(   tput setab 2)
BG_YELLOW=$(  tput setab 3)
BG_BLUE=$(    tput setab 4)
BG_MAGENTA=$( tput setab 5)
BG_CYAN=$(    tput setab 6)
BG_WHITE=$(   tput setab 7)

# Style
UNDERLINE=$(  tput smul)
NOUNDERLINE=$(tput rmul)
BOLD=$(       tput bold)
ITALIC=$(     tput sitm)

#-------------------------------------------------------------------------------
# Logging (utils/log_file.sh)
#-------------------------------------------------------------------------------

clear

# set up logfile
LOGFILE="$SCRIPT_ROOT/install.log"

exec > >(tee $LOGFILE); exec 2>&1

echo "Script compiled at: ${COMPILED_AT}"
echo "Script execution begun: $(date)"
echo ""

# utils/log_screen.sh

function show () {
  echo -e "${BG_WHITE}${BLACK}> $* ${RESET}"
}

function inform () {
  if [[ $2 ]]; then echo ""; fi
  echo -e "${BG_GREEN}${BLACK}${BOLD}>>>>  $1 ${RESET}"
}

function warn () {
  if [[ $2 ]]; then echo ""; fi
  echo -e "${BG_RED}${BLACK}${BOLD}>>>>  $1 ${RESET}"
}

function pause_awhile () {
  if [[ $2 ]]; then echo ""; fi
  echo -e "${BG_YELLOW}${BLACK}${BOLD}>>>>  $1 ${RESET}"
  read -p "${BG_YELLOW}${BLACK}${BOLD}Press <Enter> to continue.${RESET}"
}

#-------------------------------------------------------------------------------
# We begin! (utils/script_instructions.sh)
#-------------------------------------------------------------------------------

show "${BOLD}Welcome to the Installfest! ${RESET}"
show ""
show "Throughout the script you will be asked to enter your password. "
show "Unless otherwise stated, this is asking for your "
show "${BOLD}computer's password. ${RESET}"
show ""
show "This script will install, update, and configure files and "
show "applications that you will use in class."

# utils/password_capture.sh

# capture the user's password
inform "Enter your computer's password so that " true
inform "  we can make the necessary changes. "
inform "  The password will not be visible as you type: "

sudo -p "Password:" echo "${BG_WHITE}> Thank you! ${RESET}"

# mac/os_version.sh

# Determine OS version
OS_VERSION=$(sw_vers -productVersion)

#-------------------------------------------------------------------------------
# Update software on Mac (mac/os_update_software.sh)
#-------------------------------------------------------------------------------

# Check for recommended software updates
inform "Running software update on Mac OS... " true
sudo softwareupdate -i -r --ignore iTunes > /dev/null 2>&1
show "Software updated!"

#-------------------------------------------------------------------------------
# Check for & install commandline tools (mac/os_install_commandline_tools.sh)
#-------------------------------------------------------------------------------

inform "Checking for XCode Command Line Tools..." true

# Check that command line tools are installed
case $OS_VERSION in
  *10.11*) cmdline_version="CLTools_Executables" ;; # El Capitan
  *10.10*) cmdline_version="CLTools_Executables" ;; # Yosemite
  *10.9*)  cmdline_version="CLTools_Executables" ;; # Mavericks
  *10.8*)  cmdline_version="DeveloperToolsCLI"   ;; # Mountain Lion
  *10.7*)  cmdline_version="DeveloperToolsCLI"   ;; # Lion
  *10.6*)  cmdline_version="DeveloperToolsCLILeo"
           warn "Outdated OS. Considering upgrading before continuing." true;; # Snow Leopard
           # Force the user to upgrade if they're below 10.6
  *) warn "Sorry! You'll have to upgrade your OS to $MINIMUM_MAC_OS or above." true; exit 1;;
esac

# Check for Command Line Tools based on OS versions
if [ ! -z $(pkgutil --pkgs=com.apple.pkg.$cmdline_version) ]; then
  show "Command Line Tools are installed!"
elif [[ $OS_VERSION == *10.6** ]]; then
  warn "Command Line Tools are not installed!" true
  warn "  Downloading and installing the GCC compiler."
  warn "  When you're done rerun the Installfest script..."
  curl -OLk https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.6.pkg
  open GCC-10.6.pkg
  exit 1
elif [[ $OS_VERSION == *10.7* ]] || [[ $OS_VERSION == *10.8* ]]; then
  warn "Command Line Tools are not installed!" true
  warn "Register for a Developer Account"
  warn "  Download the Command Lion Tools from:"
  warn "    https://developer.apple.com/downloads/index.action"
  warn "  and then rerun the Installfest script..."
  exit 1
else
  warn "Command Line Tools are not installed!" true
  warn "  Running 'xcode-select --install' Please click continue!"
  warn "  After installing please rerun the Installfest script..."
  xcode-select --install
  exit 1
fi

#-------------------------------------------------------------------------------
# Repair disk permissions (mac/os_repair_permissions.sh)
#-------------------------------------------------------------------------------

# Ensure user has full control over their folder
inform "Ensuring the current user owns their home folder." true
sudo chown -R ${USER} ~
show "Complete!"

# Repair disk permission
inform "Running repair permissions..." true
inform "  Note: this may take a VERY LONG TIME!"
diskutil repairPermissions /
show "Complete!"

#-------------------------------------------------------------------------------
# Install Homebrew (mac/homebrew_install.sh)
#-------------------------------------------------------------------------------

inform "Installing the Homebrew package manager..." true

# Set up ownership for /usr/local to anyone with admin permissions!
echo "Setting ownership of the Homebrew directory..."
sudo mkdir -p /usr/local
sudo chgrp -R admin /usr/local
sudo chmod -R g+w /usr/local
show "Complete!"

# Installs Homebrew, our package manager
# http://brew.sh/
$(which -s brew)
if [[ $? != 0 ]]; then
  echo "Loading Homebrew installation script..."
  # piping echo to simulate hitting return in the brew install script
  echo | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
  show "Homebrew is already installed!"
fi

# Set up ownership for /usr/local to anyone with admin permissions!
echo "Setting ownership of the Homebrew library..."
mkdir -p /Library/Caches/Homebrew
sudo chgrp -R admin /Library/Caches/Homebrew
sudo chmod -R g+w /Library/Caches/Homebrew
show "Complete!"


inform "Updating Homebrew and formulae..." true
brew update # Make sure we're using the latest Homebrew
brew upgrade # Upgrade any already-installed formulae
show "Complete!"

inform "Adding Homebrew taps..." true
# These formulae duplicate software provided by OS X
# though may provide more recent or bugfix versions, and
# extra versions (other than default) of certain packages.
brew tap homebrew/dupes
brew tap homebrew/versions # necessary for specific versions of libs

# Ensures all tapped formula are symlinked into Library/Formula
# and prunes dead formula from Library/Formula.
brew tap --repair

# Remove outdated versions from the cellar
brew cleanup
show "Complete!"

#-------------------------------------------------------------------------------
# Use Homebrew to install basic libs and compilation tools
# (mac/homebrew_install_core_tools.sh)
#-------------------------------------------------------------------------------

inform "Installing basic libraries and tools via Homebrew..." true
packagelist=(
  # Autoconf is an extensible package of M4 macros that produce shell scripts to
  # automatically configure software source code packages.
  autoconf

  # Automake is a tool for automatically generating Makefile.in
  automake

  # generic library support script
  libtool

  # a YAML 1.1 parser and emitter
  libyaml

  # neon is an HTTP and WebDAV client library
  # neon

  # A toolkit implementing SSL v2/v3 and TLS protocols with full-strength
  # cryptography world-wide.
  openssl

  # pkg-config is a helper tool used when compiling applications and libraries.
  pkg-config

  # a script that uses ssh to log into a remote machine
  ssh-copy-id

  # XML C parser and toolkit
  libxml2

  # a language for transforming XML documents into other XML documents.
  libxslt

  # a conversion library between Unicode and traditional encoding
  libiconv

  # generates an index file of names found in source files of various programming
  # languages.
  ctags

  # Adds history for node repl
  readline
)

brew install ${packagelist[@]}
show "Complete!"

#-------------------------------------------------------------------------------
# Use Brew Cask to install application images (mac/homebrew_install_apps.sh)
#-------------------------------------------------------------------------------

inform "Installing Homebrew Cask, to handle Mac binaries (apps)..." true
# a CLI workflow for the administration of Mac applications
# distributed as binaries
brew tap phinze/homebrew-cask
brew install brew-cask

# (phlco) brew cask install threw some permission errors last time...
sudo chown -R ${USER} /opt/homebrew-cask

# load a tap of different versions of apps (for Sublime Text 3)
brew tap caskroom/versions
show "Complete!"

inform "Using Homebrew Cask to install apps..." true

# The Browser
brew cask install google-chrome
# brew cask install google-chrome-canary

# A Browser
brew cask install firefox
# brew cask install firefox-nightly

# The Text Editor, Sublime Text 2
# (phlco) sublime text 3 is still in beta, therefore we'll stick to stable.
# (phlco) atom won't support files over 2mb therefore we'll hold off.
# brew cask install sublime-text

# PJ: fuck it, v3
brew cask install sublime-text3

# Flux, makes the color of your computer's display adapt to the time of day
# brew cask install flux

# Alternative Terminal
# brew cask install iterm2

# for fonts
# https://github.com/caskroom/homebrew-fonts/tree/master/Casks
# brew tap caskroom/fonts
#
# brew cask install font-source-code-pro
# brew cask install font-source-sans-pro
# brew cask install font-inconsolata

# Git extensions to provide high-level repository operations
# brew install git-flow
if [[ $OS_VERSION == *10.6** ]]; then
  # spectacle
  curl -OL https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.7.zip
  unzip Spectacle+0.7.zip
  mv Spectacle.app/ /Applications
  rm Spectacle+0.7.zip

  echo "Slack requires 10.7 or higher. Please bookmark and use the browser version."

 else
  # The Window Manager
  brew cask install spectacle

  # Our class chat client
  brew cask install slack

  # The X Window Server
  brew cask install xquartz
fi

show "Complete!"

#-------------------------------------------------------------------------------
# Use Brew to install a final set of tools (mac/homebrew_install_extra_tools.sh)
#-------------------------------------------------------------------------------

inform "Installing extra libraries via Homebrew..." true

# Useful packages
packagelist=(
  # ASCII ART!!!!
  figlet

  # visualization tool for ERDs
  graphviz

  # image resizing
  imagemagick

  # PhantomJS is a headless WebKit scriptable with a JavaScript API.
  phantomjs

  # WebKit implementation of qt for Capybara testing
  # (phlco) might suggest up brew linkapps qt. we'll run it below.
  qt

  # qt for mavericks
  qt4

  # Advanced in-memory key-value store that persists on disk
  redis

  # essential UNIX commands
  # TODO (phlco) ensure they're aliased in the path correctly
  coreutils

  # a self-contained, serverless, zero-configuration, transactional SQL database
  # engine.
  sqlite
)

brew install ${packagelist[@]}

# List of useful Quick Look plugins for developers
# NOTE (phlco) necessary?
# brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql webp-quicklook suspicious-package
# (phlco) see above for qt
brew linkapps qt

show "Complete!"

#-------------------------------------------------------------------------------
# Install Postgres (mac/postgres_install_hb.sh)
#-------------------------------------------------------------------------------

inform "Installing Postgres RDBMS via Homewbrew..." true
brew install postgresql
show "Complete!"


inform "Installing Ruby interface/genm for Postgres..." true
# from brew: "When installing the postgres gem, including ARCHFLAGS is
# recommended:"
ARCHFLAGS="-arch x86_64" gem install pg
show "Complete!"

inform "Creating Postgres data directory..." true
PGDATA="/usr/local/var/postgres"
initdb "$PGDATA" -E utf8
# TODO (PJ) set PGDATA env var in bash_profile?
show "Data directory initialized in ${PGDATA}"

inform "Attempting further configurations to ensure Postgres runs correctly..." true
# NOTE! https://coderwall.com/p/rjioeg
# Yosemite problems:
# for some reasons yosemite cleaned up some files/directories in /usr/local
# for postgres installed via homebrew the following directories were missing to
# start postgres properly:
sudo mkdir -p /usr/local/var/postgres/{pg_tblspc,pg_twophase,pg_stat_tmp}
# May also need this.
sudo chmod -R 0700 /usr/local/var/postgres
sudo chown -R ${USER} /usr/local/var/postgres
show "Complete!"

inform "Setting Postgres to launch at login..." true
mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/postgresql/9.*/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
show "Complete!"


inform "Starting Postgres now..." true
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
# give postgres time to load
sleep 5s
show "Complete!"

inform "Creating a default user for Postgres..." true
# create db matching user name so we can log in by just typing psql
createdb ${USER}
show "Complete!"

# ------------------------------------------------------------------------------
# Final OS-specific Mac tweeks (mac/os_configure.sh)
# ------------------------------------------------------------------------------

inform "Setting OS configurations..." true

# # Disable the "Are you sure you want to open this application?" dialog
# defaults write com.apple.LaunchServices LSQuarantine -bool false

# Reveal IP address, hostname, OS version, etc. when clicking the clock
# in the login window
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# Disable the warning when changing a file extension
sudo defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Only use UTF-8 in Terminal.app
sudo defaults write com.apple.terminal StringEncodings -array 4

show "Complete!"

#-------------------------------------------------------------------------------
# Define a utility function to copy over files (settings/util_copy_files.sh)
#-------------------------------------------------------------------------------

function copy_files () {
  # params
  local TYPE_DIR="$1"
  local TARGET_DIR="$2"
  local FILE_LIST="$3"

  # placeholder vars
  local CURRENT_FILE=""
  local TARGET_FILE=""
  local BACKUP_FILE=""
  local DOTFILES=""
  local BACKED_UP=""
  local PRINT_LN=""

  local TIMESTAMP=$(date +%s)
  local PAD="                                       "
  local BACKUP_DIR="${SCRIPT_ROOT}/${TYPE_DIR}_backups_${TIMESTAMP}"

  # check if the type of files is dotfiles
  if [[ "$TYPE_DIR" == "dotfiles" ]]; then
    DOTFILES=true
  fi

  for FILE_PATH in $FILE_LIST; do
    CURRENT_FILE="$(basename $FILE_PATH)"
    if [[ "$DOTFILES" == true ]]; then
      CURRENT_FILE=".$CURRENT_FILE" # add a dot to dotfiles
    fi

    # skip NOT-USING files
    if [[ ! $CURRENT_FILE == *"NOT-USING"* ]]; then

      # print a formatted line describing
      PRINT_LN="Copying file $CURRENT_FILE... "
      printf "%s %s" "$PRINT_LN" "${PAD:${#PRINT_LN}}"

      TARGET_FILE="${TARGET_DIR}/${CURRENT_FILE}"
      BACKUP_FILE="${BACKUP_DIR}/${CURRENT_FILE}"

      # back up files already in the target dir
      if [[ -e "$TARGET_FILE" ]]; then
        printf "(File exists! Backing up...)"
        BACKED_UP=true # save for a final message below

        # ensure the backup dir exists
        mkdir -p "$BACKUP_DIR"
        cp "$TARGET_FILE" "$BACKUP_FILE"
      fi

      # copy the file!
      cp "$FILE_PATH" "$TARGET_FILE"

      echo "" # flush printed line
    fi
  done

  if [[ "$BACKED_UP" == true ]]; then
    echo "${BOLD}Note: you can find backed-up files in ${BACKUP_DIR}${RESET}"
  fi
}

# Usage:
# copy_files dotfiles "$HOME" "$(echo $SCRIPT_DOTFILES)"
# copy_files themes "$HOME/Desktop" "TommorrowNight.theme"

#-------------------------------------------------------------------------------
# Copy over dotfiles (settings/copy_dotfiles.sh)
#-------------------------------------------------------------------------------

inform "Copying over configuration and preference files (dotfiles)..." true
copy_files "dotfiles" "$HOME" "$(echo $SCRIPT_DOTFILES)"
show "Complete!"

#-------------------------------------------------------------------------------
# Copy over the terminal theme (settings/copy_terminal_theme.sh)
#-------------------------------------------------------------------------------

inform "Copying terminal theme to Desktop..." true
copy_files themes "$HOME/Desktop" "$SCRIPT_THEMES/TommorrowNight.terminal"
show "Complete!"

# code_dir_create.sh

inform "Creating directory for wdi: $STUDENT_FOLDER" true
mkdir -p $STUDENT_FOLDER
show "Complete!"

#-------------------------------------------------------------------------------
# We're done! (utils/script_footer.sh)
#-------------------------------------------------------------------------------

inform "We're done!" true
echo "#-- fin -- #"

warn "Please quit and re-open your terminal!" true

