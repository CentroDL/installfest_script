#!/bin/sh
#
#  _           _        _ _  __           _
# (_)_ __  ___| |_ __ _| | |/ _| ___  ___| |_
# | | '_ \/ __| __/ _` | | | |_ / _ \/ __| __|
# | | | | \__ \ || (_| | | |  _|  __/\__ \ |_
# |_|_| |_|___/\__\__,_|_|_|_|  \___||___/\__|
#
# Installfest Script for development on a vanilla Ubuntu machine
#
# Author: Phillip Lamplugh, GA Instructor (2014)
# Contributions: PJ Hughes, GA Instructor (2014)
#

# Resources
# what are some for Ubuntu?...

# References
# http://www.sudo.ws/
# http://www.gnu.org/software/bash/manual/bashref.html
# http://www.shellcheck.net
# http://explainshell.com/
#-------------------------------------------------------------------------------
# Set colors
#-------------------------------------------------------------------------------
# Foreground
BLACK=$(tput setaf 0)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)
GREEN=$(tput setaf 2)
MAGENTA=$(tput setaf 5)
ORANGE=$(tput setaf 172)
PURPLE=$(tput setaf 141)
RED=$(tput setaf 1)
WHITE=$(tput setaf 7)
YELLOW=$(tput setaf 226)
# Background
BG_BLACK=$(tput setab 0)
BG_BLUE=$(tput setab 4)
BG_CYAN=$(tput setab 6)
BG_GREEN=$(tput setab 2)
BG_MAGENTA=$(tput setab 5)
BG_ORANGE=$(tput setab 172)
BG_RED=$(tput setab 1)
BG_WHITE=$(tput setab 7)
BG_YELLOW=$(tput setab 226)
# Formatting
UNDERLINE=$(tput smul)
NOUNDERLINE=$(tput rmul)
BOLD=$(tput bold)
RESET=$(tput sgr0)
#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
# ABRB
function quoth_the_bard () {
  local message=$1
  local attribution=$2
  echo ""
  echo "$YELLOW$message$RESET"
  echo "$PURPLE$attribution$RESET"
}

# upcase error message and exit script
function fie () {
  local message=$(echo $1 | tr 'a-z' 'A-Z')
  echo ""
  echo "$RED$message$RESET"
  exit
}

# announce our acts
function figlet_announces () {
  clear
  local act=$1
  figlet -f ogre $act
}

function pause_awhile () {
   read -p "$* Press Enter to continue"
}
#-------------------------------------------------------------------------------
# Check for software updates
#-------------------------------------------------------------------------------
sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade
# TODO (phlco) reboot?
BELOVED_RUBY_VERSION="2.1.0"

SRC_DIR=~/.wdi/installfest # TODO backport this into master and mac...
SCRIPTS=$SRC_DIR/scripts
SETTINGS=$SRC_DIR/settings
INSTALL_REPO=https://github.com/ga-instructors/installfest_script.git
BRANCH="ubuntu"
# git for version control
sudo apt-get -y install git

# copy to clipboard
sudo apt-get -y install xclip

# Autoconf is an extensible package of M4 macros that produce shell scripts to automatically configure software source code packages.
sudo apt-get -y install autoconf

# Automake is a tool for automatically generating Makefile.in
sudo apt-get -y install automake

# general-purpose parser generator that converts an annotated context-free grammar into an LALR or GLR parser for that grammar.
sudo apt-get -y install bison

# generic library support script
sudo apt-get -y install libtool

# a YAML 1.1 parser and emitter
sudo apt-get -y install libyaml

# provides a set of functions for use by applications that allow users to edit command lines as they are typed in
sudo apt-get -y install libreadline6 libreadline6-dev

# a self-contained, serverless, zero-configuration, transactional SQL database engine.
sudo apt-get -y install sqlite3

# XML C parser and toolkit
sudo apt-get -y install libxml2-dev

# a language for transforming XML documents into other XML documents.
sudo apt-get -y install libxslt1-dev

# generates an index file of names found in source files of various programming languages.
sudo apt-get -y install exuberant-ctags

# ASCII ART!!!!
sudo apt-get -y install figlet

# visualization tool for ERDs
sudo apt-get -y install graphviz

# image resizing
sudo apt-get -y install imagemagick

# PhantomJS is a headless WebKit scriptable with a JavaScript API.
sudo apt-get -y install phantomjs
# SSH Keygen
ssh-keygen -t rsa -C $github_email
ssh-add id_rsa
sudo apt-get -y install xclip # Install xclip
# Copy SSH key to the clipboard
cat ~/.ssh/id_rsa.pub | xclip -selection clipboard

echo "We just copied your SSH key to the clipboard."
echo "Now we're going to visit GitHub to add the SSH key"

echo "Do the following in your browser: "
echo '- Click "SSH Keys" in the left sidebar'
echo '- Click "Add SSH key"'
echo '- Set the Title to WDI Installfest'
echo '- Paste your key into the "Key" field'
echo '- Click "Add key"'
echo '- Confirm the action by entering your GitHub password'

pause_awhile "Press Enter. We'll be here until you get back from Github."

echo "Firefox may print an error to the terminal. DON'T WORRY!"
# Open in default browser as a new process
# TODO(phlco) Firefox raises an error
xdg-open https://github.com/settings/ssh &

pause_awhile "Ok. Ready to Continue? Press Enter."
# Uninstall RVM
# http://stackoverflow.com/questions/3950260/howto-uninstall-rvm
if hash rvm 2>/dev/null || [ -d ~/.rvm ]; then
  rvm implode
  rm -rf ~/.rvm
  echo "RVM has been removed."
else
  echo "RVM is not installed. Moving on..."
fi
echo "Please register for an account on github.com if you haven't already done so."

read -p "Enter your full name: "  user_name
read -p "Github Username: "       github_name
read -p "Github Email: "          github_email
# Add user's github info to gitconfig
# https://www.kernel.org/pub/software/scm/git/docs/git-config.html
git config --global user.name  $github_name
git config --global user.email $github_email

# set olors
git config --global color.ui always

git config --global color.branch.current   "green reverse"
git config --global color.branch.local     green
git config --global color.branch.remote    yellow

git config --global color.status.added     green
git config --global color.status.changed   yellow
git config --global color.status.untracked "red blink"

# set editor
git config --global core.editor "subl -w"

# default branch to push to
git config --global push.default current
# download the repo for the absolute paths
if [[ ! -d $SRC_DIR ]]; then
  echo 'Downloading Installfest repo...'
  # autoupdate bootstrap file
  git clone -b $BRANCH $INSTALL_REPO $SRC_DIR
  # hide folder
  chflags hidden $SRC_DIR
else
  # update repo
  echo 'Updating repo...'
  cd $SRC_DIR
  git pull origin $BRANCH
fi
# This script checks for and downloads Ruby 2.1 and sets it as the global default
# https://gist.github.com/ilude/1244311
source ~/.bash_profile

ruby_check=$(rbenv versions | grep $BELOVED_RUBY_VERSION)

# copy over default gemset
# cp $SRC_DIR/settings/ruby/default-gems ~/.rbenv/default-gems

if [[ "$ruby_check" == *$BELOVED_RUBY_VERSION* ]]; then
  echo "$BELOVED_RUBY_VERSION is installed"
else
  rbenv install $BELOVED_RUBY_VERSION
fi

# Set global Ruby
rbenv global $BELOVED_RUBY_VERSION

# Reload
source ~/.bash_profile

# fin #
# Google Chrome.........The Browser
# HipChat...............The Chat Client
# Sublime Text 2........The Text Editor

# chrome
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
sudo apt-get update
sudo apt-get install google-chrome-stable

# hipchat
echo "deb http://downloads.hipchat.com/linux/apt stable main" > /etc/apt/sources.list.d/atlassian-hipchat.list
wget -O - https://www.hipchat.com/keys/hipchat-linux.key | apt-key add -
apt-get update
apt-get install hipchat

# sublime
sudo add-apt-repository ppa:webupd8team/sublime-text-2
sudo apt-get update
sudo apt-get install sublime-text
# Heroku command-line tooling for working with the Heroku platform

# http://eoinoc.net/install-hub-github-linux-mint/
wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh

# https://devcenter.heroku.com/articles/keys
echo "Heroku is a cloud platform as a service (PaaS) supporting several"
echo "programming languages."

echo "If you don’t already use SSH, you’ll need to create a public/private key"
echo "pair to deploy code to Heroku. This keypair is used for the strong"
echo "cryptography and that uniquely identifies you as a developer when pushing"
echo "code changes."

ssh-keygen -t rsa

echo "The first time you run the heroku command, you’ll be prompted for your "
echo "credentials. Your public key will then be automatically uploaded to"
echo "Heroku. This will allow you to deploy code to all of your apps."

heroku keys:add
# http://eoinoc.net/install-hub-github-linux-mint/
mkdir ~/bin
curl http://defunkt.io/hub/standalone -Lo ~/bin/hub
chmod 755 ~/bin/hub
# Event-driven I/O server-side JavaScript environment based on V8
sudo apt-get -y install nodejs

# Node package manager
sudo apt-get -y install npm

# For programs that still depend on calling the "node" binary, run:
sudo apt-get -y install nodejs-legacy
# open source object-relational database management system
# https://www.digitalocean.com/community/articles/how-to-install-and-use-postgresql-on-ubuntu-12-04
# TODO phlco set up user
# https://help.ubuntu.com/community/PostgreSQL
# sudo apt-get -y install postgresql-xc-client
# sudo apt-get -y install postgresql-client
# sudo apt-get -y install postgresql
# sudo apt-get -y install postgresql-contrib
# sudo apt-get -y install pg_ctl # initialize stop/start posgres
sudo apt-get -y install rbenv #............. our ruby version manager
sudo apt-get -y install ruby-build #........ provides an `rbenv install` command
